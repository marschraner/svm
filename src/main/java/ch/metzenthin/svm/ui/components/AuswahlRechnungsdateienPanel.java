package ch.metzenthin.svm.ui.components;

import ch.metzenthin.svm.common.SvmContext;
import ch.metzenthin.svm.ui.control.AuswahlRechnungsdateienController;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

/**
 * @author Martin Schraner
 */
public class AuswahlRechnungsdateienPanel {

    // Schalter zur Aktivierung des Default-Button (nicht dynamisch)
    private static final boolean DEFAULT_BUTTON_ENABLED = true;

    private final SvmContext svmContext;
    private JPanel mainPanel;
    private JPanel datenPanel;
    private JPanel titelPanel;
    private JPanel dateienAuswahlPanel;
    private JButton btnSelektionSerienbrief;
    private JLabel lblSerienbriefPfad;
    private JButton btnAusSerienbriefGenerierteRechnungen;
    private JLabel lblAusSerienbriefGenerierteRechnungenPfad;
    private JPanel buttonPanel;
    private JButton btnRechnungsdateienEinlesen;
    private JButton btnAbbrechen;
    private JLabel errLblSerienbriefCsvDatei;
    private JLabel errLblAusSerienbriefGenerierteRechnungenPdfDatei;
    private AuswahlRechnungsdateienController auswahlRechnungsdateienController;
    private ActionListener nextPanelListener;

    public AuswahlRechnungsdateienPanel(SvmContext svmContext) {
        this.svmContext = svmContext;
        $$$setupUI$$$();
        initializeErrLbls();
        createAuswahlRechnungsdateienController(svmContext);
    }

    private void initializeErrLbls() {
        errLblSerienbriefCsvDatei.setVisible(false);
        errLblSerienbriefCsvDatei.setForeground(Color.RED);
        errLblAusSerienbriefGenerierteRechnungenPdfDatei.setVisible(false);
        errLblAusSerienbriefGenerierteRechnungenPdfDatei.setForeground(Color.RED);
    }

    private void createAuswahlRechnungsdateienController(SvmContext svmContext) {
        auswahlRechnungsdateienController = new AuswahlRechnungsdateienController(
                svmContext, svmContext.getModelFactory().createAuswahlRechnungsdateienModel());
        auswahlRechnungsdateienController.setMainPanel(mainPanel);
        auswahlRechnungsdateienController.setBtnSelektionSerienbrief(btnSelektionSerienbrief);
        auswahlRechnungsdateienController.setLblSerienbriefPfad(lblSerienbriefPfad);
        auswahlRechnungsdateienController.setBtnSelektionAusSerienbriefGenerierteRechnungen(btnAusSerienbriefGenerierteRechnungen);
        auswahlRechnungsdateienController.setLblAusSerienbriefGenerierteRechnungenPfad(lblAusSerienbriefGenerierteRechnungenPfad);
        auswahlRechnungsdateienController.setBtnRechnungsdateienEinlesen(btnRechnungsdateienEinlesen);
        auswahlRechnungsdateienController.setBtnAbbrechen(btnAbbrechen);
        auswahlRechnungsdateienController.setErrLblSerienbriefCsvDatei(errLblSerienbriefCsvDatei);
        auswahlRechnungsdateienController.setErrLblAusSerienbriefGenerierteRechnungenPdfDatei(errLblAusSerienbriefGenerierteRechnungenPdfDatei);
        auswahlRechnungsdateienController.addZurueckListener(e -> onZurueck());
    }

    private void onZurueck() {
        setDefaultButton();
        nextPanelListener.actionPerformed(new ActionEvent(new Object[]{$$$getRootComponent$$$(), "Auswahl Rechnungsdateien", Boolean.TRUE}, ActionEvent.ACTION_PERFORMED, "Zurück zu Auswahl Rechnungsdateien"));
    }

    public void addCloseListener(ActionListener actionListener) {
        auswahlRechnungsdateienController.addCloseListener(actionListener);
    }

    public void addNextPanelListener(ActionListener nextPanelListener) {
        this.nextPanelListener = nextPanelListener;
        auswahlRechnungsdateienController.addNextPanelListener(nextPanelListener);
    }

    private void setDefaultButton() {
        if (DEFAULT_BUTTON_ENABLED) {
            svmContext.getRootPaneJFrame().setDefaultButton(btnRechnungsdateienEinlesen);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        datenPanel = new JPanel();
        datenPanel.setLayout(new GridBagLayout());
        mainPanel.add(datenPanel, BorderLayout.CENTER);
        titelPanel = new JPanel();
        titelPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 10, 20, 10);
        datenPanel.add(titelPanel, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Rechnungsversand: Auswahl Rechnungsdateien");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        titelPanel.add(label1, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        titelPanel.add(spacer1, gbc);
        dateienAuswahlPanel = new JPanel();
        dateienAuswahlPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 10, 10, 10);
        datenPanel.add(dateienAuswahlPanel, gbc);
        dateienAuswahlPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Auswahl Rechnungsdateien", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, Font.BOLD, -1, dateienAuswahlPanel.getFont()), new Color(-16777216)));
        final JLabel label2 = new JLabel();
        label2.setText("Serienbrief");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        dateienAuswahlPanel.add(label2, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dateienAuswahlPanel.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        dateienAuswahlPanel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dateienAuswahlPanel.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        dateienAuswahlPanel.add(spacer5, gbc);
        btnSelektionSerienbrief = new JButton();
        btnSelektionSerienbrief.setText("Auswahl csv-Datei");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dateienAuswahlPanel.add(btnSelektionSerienbrief, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Aus Serienbrief generierte Semesterrechnungen");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        dateienAuswahlPanel.add(label3, gbc);
        btnAusSerienbriefGenerierteRechnungen = new JButton();
        btnAusSerienbriefGenerierteRechnungen.setText("Auswahl pdf-Datei");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dateienAuswahlPanel.add(btnAusSerienbriefGenerierteRechnungen, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 300;
        dateienAuswahlPanel.add(spacer6, gbc);
        final JPanel spacer7 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 100;
        dateienAuswahlPanel.add(spacer7, gbc);
        final JPanel spacer8 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.VERTICAL;
        dateienAuswahlPanel.add(spacer8, gbc);
        lblSerienbriefPfad = new JLabel();
        lblSerienbriefPfad.setText("(keine Datei ausgewählt)");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        dateienAuswahlPanel.add(lblSerienbriefPfad, gbc);
        final JPanel spacer9 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dateienAuswahlPanel.add(spacer9, gbc);
        final JPanel spacer10 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 800;
        dateienAuswahlPanel.add(spacer10, gbc);
        lblAusSerienbriefGenerierteRechnungenPfad = new JLabel();
        lblAusSerienbriefGenerierteRechnungenPfad.setText("(keine Datei ausgewählt)");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        dateienAuswahlPanel.add(lblAusSerienbriefGenerierteRechnungenPfad, gbc);
        final JPanel spacer11 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dateienAuswahlPanel.add(spacer11, gbc);
        errLblSerienbriefCsvDatei = new JLabel();
        errLblSerienbriefCsvDatei.setText("errLblSerienbriefCsvDatei");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        dateienAuswahlPanel.add(errLblSerienbriefCsvDatei, gbc);
        errLblAusSerienbriefGenerierteRechnungenPdfDatei = new JLabel();
        errLblAusSerienbriefGenerierteRechnungenPdfDatei.setText("errLblAusSerienbriefGenerierteRechnungenPdfDatei");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        dateienAuswahlPanel.add(errLblAusSerienbriefGenerierteRechnungenPdfDatei, gbc);
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        datenPanel.add(buttonPanel, gbc);
        btnRechnungsdateienEinlesen = new JButton();
        btnRechnungsdateienEinlesen.setMaximumSize(new Dimension(180, 29));
        btnRechnungsdateienEinlesen.setMinimumSize(new Dimension(180, 29));
        btnRechnungsdateienEinlesen.setText("Rechnungsdateien einlesen");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        buttonPanel.add(btnRechnungsdateienEinlesen, gbc);
        final JPanel spacer12 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        buttonPanel.add(spacer12, gbc);
        final JPanel spacer13 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        buttonPanel.add(spacer13, gbc);
        btnAbbrechen = new JButton();
        btnAbbrechen.setMaximumSize(new Dimension(114, 29));
        btnAbbrechen.setMinimumSize(new Dimension(114, 29));
        btnAbbrechen.setText("Abbrechen");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        buttonPanel.add(btnAbbrechen, gbc);
        final JPanel spacer14 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        buttonPanel.add(spacer14, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
