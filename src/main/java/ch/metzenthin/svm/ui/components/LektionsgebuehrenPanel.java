package ch.metzenthin.svm.ui.components;

import ch.metzenthin.svm.common.SvmContext;
import ch.metzenthin.svm.ui.control.LektionsgebuehrenController;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.Locale;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;

/**
 * @author Martin Schraner
 */
@SuppressWarnings({"java:S100", "java:S1171", "java:S1450"})
public class LektionsgebuehrenPanel {

  private JPanel panel1;
  private JPanel datenPanel;
  private JPanel titelPanel;
  private JTable lektionsgebuehrenTable;
  private JPanel buttonPanel;
  private JButton btnNeu;
  private JButton btnBearbeiten;
  private JButton btnLoeschen;
  private JButton btnAbbrechen;
  private LektionsgebuehrenController lektionsgebuehrenController;

  LektionsgebuehrenPanel(SvmContext svmContext) {
    $$$setupUI$$$();
    createLektionsgebuehrenController(svmContext);
  }

  private void createLektionsgebuehrenController(SvmContext svmContext) {
    lektionsgebuehrenController =
        new LektionsgebuehrenController(
            svmContext.getModelFactory().createLektionsgebuehrenModel(), svmContext);
    lektionsgebuehrenController.setLektionsgebuehrenTable(lektionsgebuehrenTable);
    lektionsgebuehrenController.setBtnNeu(btnNeu);
    lektionsgebuehrenController.setBtnBearbeiten(btnBearbeiten);
    lektionsgebuehrenController.setBtnLoeschen(btnLoeschen);
    lektionsgebuehrenController.setBtnAbbrechen(btnAbbrechen);
  }

  public void addCloseListener(ActionListener closeListener) {
    lektionsgebuehrenController.addCloseListener(closeListener);
  }

  private void createUIComponents() {
    lektionsgebuehrenTable = new JTable();
    lektionsgebuehrenTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    panel1 = new JPanel();
    panel1.setLayout(new BorderLayout(0, 0));
    datenPanel = new JPanel();
    datenPanel.setLayout(new GridBagLayout());
    panel1.add(datenPanel, BorderLayout.CENTER);
    titelPanel = new JPanel();
    titelPanel.setLayout(new GridBagLayout());
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.NORTH;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.insets = new Insets(10, 10, 20, 10);
    datenPanel.add(titelPanel, gbc);
    final JLabel label1 = new JLabel();
    Font label1Font = this.$$$getFont$$$(null, -1, 36, label1.getFont());
    if (label1Font != null) label1.setFont(label1Font);
    label1.setText("Lektionsgebühren verwalten");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    titelPanel.add(label1, gbc);
    final JPanel spacer1 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    titelPanel.add(spacer1, gbc);
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new BorderLayout(0, 0));
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    datenPanel.add(panel2, gbc);
    panel2.setBorder(
        BorderFactory.createTitledBorder(
            BorderFactory.createEtchedBorder(),
            "Lektionsgebühren",
            TitledBorder.DEFAULT_JUSTIFICATION,
            TitledBorder.DEFAULT_POSITION,
            this.$$$getFont$$$(null, Font.BOLD, -1, panel2.getFont()),
            null));
    final JScrollPane scrollPane1 = new JScrollPane();
    panel2.add(scrollPane1, BorderLayout.CENTER);
    lektionsgebuehrenTable.setOpaque(false);
    lektionsgebuehrenTable.setPreferredScrollableViewportSize(new Dimension(800, 150));
    scrollPane1.setViewportView(lektionsgebuehrenTable);
    final Spacer spacer2 = new Spacer();
    panel2.add(spacer2, BorderLayout.NORTH);
    final Spacer spacer3 = new Spacer();
    panel2.add(spacer3, BorderLayout.SOUTH);
    final Spacer spacer4 = new Spacer();
    panel2.add(spacer4, BorderLayout.WEST);
    final Spacer spacer5 = new Spacer();
    panel2.add(spacer5, BorderLayout.EAST);
    final JPanel spacer6 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weighty = 0.5;
    gbc.fill = GridBagConstraints.VERTICAL;
    datenPanel.add(spacer6, gbc);
    final JPanel spacer7 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.weighty = 0.5;
    gbc.fill = GridBagConstraints.VERTICAL;
    datenPanel.add(spacer7, gbc);
    buttonPanel = new JPanel();
    buttonPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1, true, false));
    panel1.add(buttonPanel, BorderLayout.SOUTH);
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridBagLayout());
    buttonPanel.add(
        panel3,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel4 = new JPanel();
    panel4.setLayout(new GridBagLayout());
    buttonPanel.add(
        panel4,
        new GridConstraints(
            0,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    btnAbbrechen = new JButton();
    btnAbbrechen.setMaximumSize(new Dimension(114, 29));
    btnAbbrechen.setMinimumSize(new Dimension(114, 29));
    btnAbbrechen.setPreferredSize(new Dimension(114, 29));
    btnAbbrechen.setText("Abbrechen");
    btnAbbrechen.setMnemonic('A');
    btnAbbrechen.setDisplayedMnemonicIndex(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.insets = new Insets(0, 0, 0, 10);
    panel4.add(btnAbbrechen, gbc);
    final JPanel spacer8 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 2;
    gbc.fill = GridBagConstraints.VERTICAL;
    panel4.add(spacer8, gbc);
    final JPanel spacer9 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.VERTICAL;
    panel4.add(spacer9, gbc);
    final JPanel spacer10 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel4.add(spacer10, gbc);
    final JPanel panel5 = new JPanel();
    panel5.setLayout(new GridBagLayout());
    buttonPanel.add(
        panel5,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    btnNeu = new JButton();
    btnNeu.setMaximumSize(new Dimension(114, 29));
    btnNeu.setMinimumSize(new Dimension(114, 29));
    btnNeu.setPreferredSize(new Dimension(114, 29));
    btnNeu.setText("Neu");
    btnNeu.setMnemonic('N');
    btnNeu.setDisplayedMnemonicIndex(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel5.add(btnNeu, gbc);
    final JPanel spacer11 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.fill = GridBagConstraints.VERTICAL;
    panel5.add(spacer11, gbc);
    final JPanel spacer12 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.VERTICAL;
    panel5.add(spacer12, gbc);
    final JPanel spacer13 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel5.add(spacer13, gbc);
    btnBearbeiten = new JButton();
    btnBearbeiten.setMaximumSize(new Dimension(114, 29));
    btnBearbeiten.setMinimumSize(new Dimension(114, 29));
    btnBearbeiten.setPreferredSize(new Dimension(114, 29));
    btnBearbeiten.setText("Bearbeiten");
    btnBearbeiten.setMnemonic('B');
    btnBearbeiten.setDisplayedMnemonicIndex(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel5.add(btnBearbeiten, gbc);
    final JPanel spacer14 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 3;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel5.add(spacer14, gbc);
    btnLoeschen = new JButton();
    btnLoeschen.setMaximumSize(new Dimension(114, 29));
    btnLoeschen.setMinimumSize(new Dimension(114, 29));
    btnLoeschen.setPreferredSize(new Dimension(114, 29));
    btnLoeschen.setText("Löschen");
    btnLoeschen.setMnemonic('L');
    btnLoeschen.setDisplayedMnemonicIndex(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 4;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel5.add(btnLoeschen, gbc);
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    Font font =
        new Font(
            resultName,
            style >= 0 ? style : currentFont.getStyle(),
            size >= 0 ? size : currentFont.getSize());
    boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
    Font fontWithFallback =
        isMac
            ? new Font(font.getFamily(), font.getStyle(), font.getSize())
            : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
    return fontWithFallback instanceof FontUIResource
        ? fontWithFallback
        : new FontUIResource(fontWithFallback);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panel1;
  }
}
