package ch.metzenthin.svm.ui.components;

import ch.metzenthin.svm.common.SvmContext;
import ch.metzenthin.svm.ui.componentmodel.SemesterrechnungenTableModel;
import ch.metzenthin.svm.ui.control.SemesterrechnungenController;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.font.TextAttribute;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

/**
 * @author Martin Schraner
 */
@SuppressWarnings({"java:S100", "java:S1450"})
public class SemesterrechnungenPanel {

    private JPanel panel1;
    private JPanel datenPanel;
    private JPanel titelPanel;
    private JPanel semesterrechnungenTablePanel;
    private JPanel btnPanel;
    private JTable semesterrechnungenTable;
    private JButton btnAlleDeselektieren;
    private JButton btnAlleSelektieren;
    private JButton btnExportieren;
    private JButton btnRechnungsdatum;
    private JButton btnDetailsBearbeiten;
    private JButton btnLoeschen;
    private JButton btnZurueck;
    private JButton btnAbbrechen;
    private JButton btnWiederherstellen;
    private JLabel lblTotal;
    private JLabel lblTitel;
    private JButton btnEmail;
    private final SemesterrechnungenController semesterrechnungenController;

    public SemesterrechnungenPanel(SvmContext svmContext, SemesterrechnungenTableModel semesterrechnungenTableModel, boolean nachGeloeschtenGesucht) {
        $$$setupUI$$$();
        createUIComponents();

        // Kursiv unterstrichen für alle deselektieren / alle selektieren
        Map<TextAttribute, Integer> fontAttributes = new HashMap<>();
        fontAttributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        Font newButtonFont = new Font(btnAlleDeselektieren.getFont().getName(), Font.ITALIC, btnAlleDeselektieren.getFont().getSize()).deriveFont(fontAttributes);
        btnAlleDeselektieren.setFont(newButtonFont);
        btnAlleSelektieren.setFont(newButtonFont);

        semesterrechnungenController = new SemesterrechnungenController(svmContext, svmContext.getModelFactory().createSemesterrechnungenModel(), semesterrechnungenTableModel, nachGeloeschtenGesucht);
        semesterrechnungenController.setSemesterrechnungenTable(semesterrechnungenTable);
        semesterrechnungenController.setLblTitel(lblTitel);
        semesterrechnungenController.setLblTotal(lblTotal);
        semesterrechnungenController.setBtnAlleDeselektieren(btnAlleDeselektieren);
        semesterrechnungenController.setBtnAlleSelektieren(btnAlleSelektieren);
        semesterrechnungenController.setBtnDetailsBearbeiten(btnDetailsBearbeiten);
        semesterrechnungenController.setBtnExportieren(btnExportieren);
        semesterrechnungenController.setBtnRechnungsdatum(btnRechnungsdatum);
        semesterrechnungenController.setBtnEmail(btnEmail);
        semesterrechnungenController.setBtnLoeschen(btnLoeschen);
        semesterrechnungenController.setBtnWiederherstellen(btnWiederherstellen);
        semesterrechnungenController.setBtnZurueck(btnZurueck);
        semesterrechnungenController.setBtnAbbrechen(btnAbbrechen);
    }

    public void addNextPanelListener(ActionListener actionListener) {
        semesterrechnungenController.addNextPanelListener(actionListener);
    }

    public void addCloseListener(ActionListener closeListener) {
        semesterrechnungenController.addCloseListener(closeListener);
    }

    public void addZurueckListener(ActionListener zurueckListener) {
        semesterrechnungenController.addZurueckListener(zurueckListener);
    }

    @SuppressWarnings("DuplicatedCode")
    private void createUIComponents() {
        // JTable mit optimiertem Scroll-Verhalten
        // http://stackoverflow.com/questions/6104916/how-to-make-jtable-both-autoresize-and-horizontall-scrollable
        semesterrechnungenTable = new JTable() {
            @Override
            public boolean getScrollableTracksViewportWidth() {
                return getPreferredSize().width < getParent().getWidth();
            }
        };
        semesterrechnungenTable.setAutoCreateRowSorter(true);
        semesterrechnungenTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        semesterrechnungenTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        final JScrollPane scrollPane = new JScrollPane(semesterrechnungenTable);
        semesterrechnungenTablePanel.add(scrollPane);
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        datenPanel = new JPanel();
        datenPanel.setLayout(new GridBagLayout());
        panel1.add(datenPanel, BorderLayout.CENTER);
        titelPanel = new JPanel();
        titelPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 20, 10);
        datenPanel.add(titelPanel, gbc);
        lblTitel = new JLabel();
        Font lblTitelFont = this.$$$getFont$$$(null, -1, 36, lblTitel.getFont());
        if (lblTitelFont != null) lblTitel.setFont(lblTitelFont);
        lblTitel.setText("Suchresultat");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        titelPanel.add(lblTitel, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        titelPanel.add(spacer1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 10, 10, 10);
        datenPanel.add(panel2, gbc);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Semesterrechnungen", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, Font.BOLD, -1, panel2.getFont()), null));
        semesterrechnungenTablePanel = new JPanel();
        semesterrechnungenTablePanel.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridwidth = 8;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel2.add(semesterrechnungenTablePanel, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 9;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.gridwidth = 8;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel2.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer4, gbc);
        btnAlleSelektieren = new JButton();
        btnAlleSelektieren.setBackground(new Color(-1));
        btnAlleSelektieren.setBorderPainted(false);
        btnAlleSelektieren.setContentAreaFilled(false);
        btnAlleSelektieren.setHorizontalAlignment(2);
        btnAlleSelektieren.setHorizontalTextPosition(2);
        btnAlleSelektieren.setMargin(new Insets(2, 0, 2, 14));
        btnAlleSelektieren.setMaximumSize(new Dimension(145, 18));
        btnAlleSelektieren.setMinimumSize(new Dimension(145, 18));
        btnAlleSelektieren.setOpaque(false);
        btnAlleSelektieren.setPreferredSize(new Dimension(145, 18));
        btnAlleSelektieren.setText("Alle auswählen");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 60;
        panel2.add(btnAlleSelektieren, gbc);
        btnAlleDeselektieren = new JButton();
        btnAlleDeselektieren.setBackground(new Color(-1));
        btnAlleDeselektieren.setBorderPainted(false);
        btnAlleDeselektieren.setContentAreaFilled(false);
        btnAlleDeselektieren.setHorizontalAlignment(2);
        btnAlleDeselektieren.setHorizontalTextPosition(2);
        btnAlleDeselektieren.setMargin(new Insets(2, 0, 2, 14));
        btnAlleDeselektieren.setMaximumSize(new Dimension(145, 18));
        btnAlleDeselektieren.setMinimumSize(new Dimension(145, 18));
        btnAlleDeselektieren.setOpaque(false);
        btnAlleDeselektieren.setPreferredSize(new Dimension(145, 18));
        btnAlleDeselektieren.setText("Auswahl löschen");
        btnAlleDeselektieren.setVisible(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 60;
        panel2.add(btnAlleDeselektieren, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 180;
        panel2.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer6, gbc);
        final JPanel spacer7 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 7;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer7, gbc);
        final JPanel spacer8 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 180;
        panel2.add(spacer8, gbc);
        lblTotal = new JLabel();
        lblTotal.setText("lblTotal");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(lblTotal, gbc);
        final JPanel spacer9 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel2.add(spacer9, gbc);
        btnPanel = new JPanel();
        btnPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1, true, false));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        datenPanel.add(btnPanel, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        btnPanel.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        btnLoeschen = new JButton();
        btnLoeschen.setMaximumSize(new Dimension(120, 29));
        btnLoeschen.setMinimumSize(new Dimension(120, 29));
        btnLoeschen.setPreferredSize(new Dimension(120, 29));
        btnLoeschen.setText("Löschen");
        btnLoeschen.setMnemonic('L');
        btnLoeschen.setDisplayedMnemonicIndex(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 0);
        panel3.add(btnLoeschen, gbc);
        final JPanel spacer10 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer10, gbc);
        final JPanel spacer11 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel3.add(spacer11, gbc);
        final JPanel spacer12 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel3.add(spacer12, gbc);
        btnExportieren = new JButton();
        btnExportieren.setMaximumSize(new Dimension(120, 29));
        btnExportieren.setMinimumSize(new Dimension(120, 29));
        btnExportieren.setPreferredSize(new Dimension(120, 29));
        btnExportieren.setText("Exportieren");
        btnExportieren.setMnemonic('E');
        btnExportieren.setDisplayedMnemonicIndex(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(btnExportieren, gbc);
        final JPanel spacer13 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer13, gbc);
        btnRechnungsdatum = new JButton();
        btnRechnungsdatum.setMaximumSize(new Dimension(158, 29));
        btnRechnungsdatum.setMinimumSize(new Dimension(158, 29));
        btnRechnungsdatum.setPreferredSize(new Dimension(158, 29));
        btnRechnungsdatum.setText("Rechnungsdatum");
        btnRechnungsdatum.setMnemonic('C');
        btnRechnungsdatum.setDisplayedMnemonicIndex(2);
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(btnRechnungsdatum, gbc);
        final JPanel spacer14 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer14, gbc);
        btnWiederherstellen = new JButton();
        btnWiederherstellen.setMaximumSize(new Dimension(152, 29));
        btnWiederherstellen.setMinimumSize(new Dimension(152, 29));
        btnWiederherstellen.setPreferredSize(new Dimension(152, 29));
        btnWiederherstellen.setText("Wiederherstellen");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 0);
        panel3.add(btnWiederherstellen, gbc);
        final JPanel spacer15 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer15, gbc);
        btnEmail = new JButton();
        btnEmail.setMaximumSize(new Dimension(142, 29));
        btnEmail.setMinimumSize(new Dimension(142, 29));
        btnEmail.setPreferredSize(new Dimension(142, 29));
        btnEmail.setText("Gruppen-E-Mail");
        btnEmail.setMnemonic('G');
        btnEmail.setDisplayedMnemonicIndex(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 7;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(btnEmail, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        btnPanel.add(panel4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel spacer16 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(spacer16, gbc);
        btnAbbrechen = new JButton();
        btnAbbrechen.setMaximumSize(new Dimension(114, 29));
        btnAbbrechen.setMinimumSize(new Dimension(114, 29));
        btnAbbrechen.setPreferredSize(new Dimension(114, 29));
        btnAbbrechen.setText("Abbrechen");
        btnAbbrechen.setMnemonic('A');
        btnAbbrechen.setDisplayedMnemonicIndex(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 10);
        panel4.add(btnAbbrechen, gbc);
        final JPanel spacer17 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel4.add(spacer17, gbc);
        final JPanel spacer18 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel4.add(spacer18, gbc);
        btnZurueck = new JButton();
        btnZurueck.setMaximumSize(new Dimension(114, 29));
        btnZurueck.setMinimumSize(new Dimension(114, 29));
        btnZurueck.setPreferredSize(new Dimension(114, 29));
        btnZurueck.setText("Zurück");
        btnZurueck.setMnemonic('Z');
        btnZurueck.setDisplayedMnemonicIndex(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(btnZurueck, gbc);
        final JPanel spacer19 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(spacer19, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        btnPanel.add(panel5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        btnDetailsBearbeiten = new JButton();
        btnDetailsBearbeiten.setMaximumSize(new Dimension(176, 29));
        btnDetailsBearbeiten.setMinimumSize(new Dimension(176, 29));
        btnDetailsBearbeiten.setPreferredSize(new Dimension(176, 29));
        btnDetailsBearbeiten.setText("Details / Bearbeiten");
        btnDetailsBearbeiten.setMnemonic('B');
        btnDetailsBearbeiten.setDisplayedMnemonicIndex(10);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel5.add(btnDetailsBearbeiten, gbc);
        final JPanel spacer20 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel5.add(spacer20, gbc);
        final JPanel spacer21 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel5.add(spacer21, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
